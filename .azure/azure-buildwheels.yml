name: $(Date:yyyyMMdd)$(Rev:rr)

# trigger build only after successful test on main-branch
resources:
  pipelines:
    - pipeline: testing
      source: testing
      trigger:
        branches:
          include:
            - refs/head/main
            - refs/tags/v*

trigger: none
pr: none

variables:
  CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
  CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  CIBW_BUILD_VERBOSITY: 1
  python_version: 3.12

jobs:
  - job: build
    strategy:
      matrix:
        linux:
          vmImage: "ubuntu-latest"
          install_command: |
            set -o errexit
            python3 -m pip install --upgrade pip
            pip3 install build cibuildwheel twine meson
          version_command: |
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-/+/g')
            echo "Setting version to: $VERSION"
            meson rewrite kwargs set project / version "$VERSION"
          publish_sdist: true
        macos:
          vmImage: "macOS-latest"
          install_command: |
            set -o errexit
            python3 -m pip install --upgrade pip
            pip3 install build cibuildwheel twine meson
          version_command: |
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-/+/g')
            echo "Setting version to: $VERSION"
            meson rewrite kwargs set project / version "$VERSION"
          publish_sdist: false
        windows:
          vmImage: "windows-latest"
          install_command: |
            set -o errexit
            python -m pip install --upgrade pip
            pip install build cibuildwheel twine meson
          version_command: |
            $VERSION = git describe --tags --always | ForEach-Object { $_ -replace '^v', '' -replace '-', '+' }
            meson rewrite kwargs set project / version $VERSION
            Write-Host "meson.build updated to version: $VERSION"
          publish_sdist: false
    pool:
      vmImage: $[ matrix.vmImage ]
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python_version)"
        displayName: "Use Python $(python_version)"
      - bash: $[ matrix.install_command ]
        displayName: Install dependencies
      - bash: $[ matrix.version_command ]
        condition: not(startsWith(variables['build.sourceBranch'], 'refs/tags/'))
        displayName: Set version from Git for Development Builds
      - bash: python3 -m build --sdist
        condition: eq(variables['matrix.publish_sdist'], 'true')
        displayName: Build sdist
      - bash: cibuildwheel --output-dir wheelhouse .
        displayName: Build wheels
      - task: TwineAuthenticate@0
        inputs:
          artifactFeeds: "xrayutilities/xrayutilities-dev"
      - script: "twine upload -r xrayutilities/xrayutilities-dev --config-file $(PYPIRC_PATH) wheelhouse/*"
        displayName: Publish Wheels
      - script: "twine upload -r xrayutilities/xrayutilities-dev --config-file $(PYPIRC_PATH) dist/*"
        condition: eq(variables['matrix.publish_sdist'], 'true')
        displayName: Publish sdist
