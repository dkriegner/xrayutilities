name: $(Date:yyyyMMdd)$(Rev:rr)

# trigger build only after successful test on main-branch
resources:
  pipelines:
    - pipeline: testing
      source: testing
      trigger:
        branches:
          include:
            - refs/head/main
            - refs/tags/v*

trigger: none
pr: none

variables:
  CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
  CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  CIBW_BUILD_VERBOSITY: 1
  python_version: 3.12

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macOS-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)


steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "$(python_version)"
    displayName: "Use Python $(python_version)"

  # Install dependencies for Linux and macOS
  - bash: |
      set -o errexit
      python3 -m pip install --upgrade pip
      pip3 install build cibuildwheel twine meson
    condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
    displayName: Install dependencies on Linux/macOS

  # Install dependencies for Windows
  - bash: |
      set -o errexit
      python -m pip install --upgrade pip
      pip install build cibuildwheel twine meson
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: Install dependencies on Windows

  - bash: |
      VERSION=$(git describe --tags --always)
      VERSION=$(echo "$VERSION" | sed 's/^v//') # Remove leading 'v'
      if [[ "$VERSION" == *"-"* ]]; then
        parts=(${VERSION//-/ })
        tag="${parts[0]}"
        distance="${parts[1]}"
        hash="${parts[2]}"
        VERSION="${tag}+${distance}.${hash}" # Combine with + and .
      fi
      echo "Setting version to: $VERSION"
      meson rewrite kwargs set project / version "$VERSION"
    condition: and(succeeded(), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')), not(startsWith(variables['build.sourceBranch'], 'refs/tags/')))
    displayName: Set version from Git on Linux/macOS

  - powershell: |
      $VERSION = git describe --tags --always
      $VERSION = $VERSION -replace '^v', '' # Remove leading 'v'

      if ($VERSION -match '-') {
        $parts = $VERSION -split '-'
        $tag = $parts[0]
        $distance = $parts[1]
        $hash = $parts[2]
        $VERSION = "$tag+$distance.$hash" # Combine with + and .
      }

      meson rewrite kwargs set project / version $VERSION
      Write-Host "meson.build updated to version: $VERSION"
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), not(startsWith(variables['build.sourceBranch'], 'refs/tags/')))
    displayName: Set version from Git on Windows

  # Build sdist (only on Linux)
  - bash: python3 -m build --sdist
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    displayName: Build sdist

  # Build wheels
  - bash: cibuildwheel --output-dir wheelhouse .
    displayName: Build wheels

  # Authenticate for publishing
  - task: TwineAuthenticate@0
    inputs:
      artifactFeeds: "xrayutilities/xrayutilities-dev"

  # Publish wheels
  - script: "twine upload -r xrayutilities/xrayutilities-dev --config-file $(PYPIRC_PATH) wheelhouse/*"
    displayName: Publish Wheels

  # Publish sdist (only on Linux)
  - script: "twine upload -r xrayutilities/xrayutilities-dev --config-file $(PYPIRC_PATH) dist/*"
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    displayName: Publish sdist
